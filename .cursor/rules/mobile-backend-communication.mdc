---
description: Use when the mobile app communicates with the backend
globs: 
alwaysApply: false
---
## tRPC v11 with TanStack Query Communication

### Core Principles

- Use tRPC v11 with TanStack Query for all frontend-backend communication
- Follow the modern tRPC TanStack Query client pattern (not the classic integration)
- Ensure each query has a unique and descriptive query key
- Implement proper error handling for all mutations

### Query Implementation

- Use `queryOptions` for regular queries:
```typescript
const queryOptions = trpc.path.to.query.queryOptions(
  { 
    // Input parameters here
  },
  {
    // Additional TanStack Query options
    staleTime: 60000, // Example: 1 minute stale time
  }
);

const query = useQuery(queryOptions);
```

- Use `infiniteQueryOptions` for paginated/infinite data:
```typescript
const infiniteQueryOptions = trpc.path.to.query.infiniteQueryOptions(
  {
    // Input parameters including cursor
  },
  {
    getNextPageParam: (lastPage) => lastPage.nextCursor,
  }
);

const infiniteQuery = useInfiniteQuery(infiniteQueryOptions);
```

### Mutation Implementation

- Always implement `onSuccess` and `onError` handlers for mutations:
```typescript
const mutationOptions = trpc.path.to.mutation.mutationOptions({
  onSuccess: (data) => {
    // Handle success
    // - Update UI state
    // - Show success notification
    // - Invalidate relevant queries
  },
  onError: (error) => {
    // Handle error
    // - Display error message
    // - Log error information
    // - Restore previous state if needed
  }
});

const mutation = useMutation(mutationOptions);
```

### Query Key Management

- Use descriptive and unique query keys by leveraging tRPC's built-in key generation:
```typescript
// Get specific query key
const queryKey = trpc.path.to.query.queryKey();

// Get router-level query key (matches all queries in router)
const routerQueryKey = trpc.router.pathKey();
```

- Invalidate queries properly after mutations:
```typescript
const queryClient = useQueryClient();

// In onSuccess handler
queryClient.invalidateQueries({ queryKey: trpc.path.to.query.queryKey() });
```

### Type Safety

- Leverage tRPC's type inference:
```typescript
import { inferInput, inferOutput } from '@trpc/tanstack-react-query';

// For a specific procedure
type Input = inferInput<typeof trpc.path.to.procedure>;
type Output = inferOutput<typeof trpc.path.to.procedure>;

// For full router
import type { inferRouterInputs, inferRouterOutputs } from '@trpc/server';
import { AppRouter } from './path/to/router';

type Inputs = inferRouterInputs<AppRouter>;
type Outputs = inferRouterOutputs<AppRouter>;
```

### Error Handling

- Implement consistent error handling across the application
- Always display user-friendly error messages
- Log detailed error information when appropriate
- Consider using a toast or notification system for errors

### Performance Optimizations

- Set appropriate staleTime and cacheTime based on data freshness requirements
- Use prefetching for anticipated data needs
- Consider optimistic updates for mutations that modify data
- Implement proper query invalidation strategies to avoid over-fetching

### Testing

- Write unit tests for complex query and mutation logic
- Test error handling paths to ensure they work correctly
- Mock tRPC responses in tests to simulate different server scenarios